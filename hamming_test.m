%% Test the Hamming encoding function.

% Ensure all the information words are mapped to different code words.
code_words = zeros(16,1);

for i = 0:15
    code_words(i+1) = hamming_encode(i);
end

assert(length(unique(code_words)) == length(code_words));

% Ensure the code is systematic (i.e. the 4 MSB are equal to the
% information word).
for i = 0:15
    assert(bitshift(hamming_encode(i), -3) == i);
end

% According to Wikipedia
% (https://en.wikipedia.org/wiki/Hamming_code#[7,4]_Hamming_code)
% the code is generated by the following G matrix. Ensure that our
% implementation produces consistent results with the one obtained by
% multiplying G times the information word.
G = [0b1000
    0b0100
    0b0010
    0b0001
    0b1101
    0b1011
    0b0111];

for i = 0:15
    % Check for information word `i`.
    cw = hamming_encode(i);
    
    grd = 0;
    for j = 1:7
        % Compute the j-th bit of the code word using G.
        ml = bitand(G(j), i);
        sm = mod(sum(dec2bin(ml)), 2);
        
        if sm > 0
            % `8-j` because `bitset` starts from the LSB.
           grd = bitset(grd, 8-j);
        end
    end

    % Ensure the codewords coincide.
    assert(grd == cw);
end

%% Test the Hamming decoding function.

% 0-bit error.
for i = 0:15
    assert(i == hamming_decode(hamming_encode(i)));
end

% 1-bit error.
for i = 0:15
    % Flip the j-th bit.
    for j = 0:6
        x = hamming_encode(i);
        x = bitxor(x, bitshift(1, j));
        
        % Decoding should still be possible..
        assert(hamming_decode(x) == i);
    end
end
